<project xmlns="http://maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="
  http://maven.apache.org/POM/4.0.0 
  http://maven.apache.org/xsd/maven-4.0.0.xsd">
  
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.yklis</groupId>
	<artifactId>YkLis</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>war</packaging>

	<!-- 定义变量 -->
	<properties>
    	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    	<spring.version>4.1.7.RELEASE</spring.version>
    	<spring.groupId>org.springframework</spring.groupId>
    	
    	<!-- maven内置变量${maven.build.timestamp} -->
    	<build.time>${maven.build.timestamp}</build.time>
	</properties>

	<dependencies>
	    <!-- scoper取值范围：
	    compile，缺省值，适用于所有阶段，会随着项目一起发布。 
	    provided，期望JDK、容器或使用者会提供这个依赖。如servlet.jar。 不会被打包
	    runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。 
	    test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。 
	    system，类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它 -->
		<dependency>
	    	<groupId>junit</groupId>
	    	<artifactId>junit</artifactId>
	    	<version>4.12</version>
	    	<!-- <scope>test</scope> -->
	    </dependency>
	   
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>
		
		<!-- 解决eclipse环境下的报错提示:javax.servlet.jsp.PageContext cannot be resolved to a type -->
		<dependency>
		    <groupId>javax.servlet.jsp</groupId>
		    <artifactId>javax.servlet.jsp-api</artifactId>
		    <version>2.3.1</version>
		    <scope>provided</scope>
		</dependency>		
		   
		<dependency>
			<groupId>aopalliance</groupId>
			<artifactId>aopalliance</artifactId>
			<version>1.0</version>
		</dependency>
		
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.8.7</version>
		</dependency>
		
		<dependency>
			<groupId>com.mchange</groupId>
			<artifactId>c3p0</artifactId>
			<version>0.9.5.1</version>
		</dependency>
		
		<dependency>
			<groupId>com.mchange</groupId>
			<artifactId>mchange-commons-java</artifactId>
			<version>0.2.10</version>
		</dependency>
		
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.16</version>
		</dependency>
		
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.6.6</version>
		</dependency>
		
		<dependency>
			<groupId>jstl</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		
		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
			<version>1.1.2</version>
		</dependency>
		
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.2</version>
		</dependency>
		
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-pool2</artifactId>
			<version>2.4.2</version>
		</dependency>		
		
		<dependency>
			<groupId>javax.transaction</groupId>
			<artifactId>jta</artifactId>
			<version>1.1</version>
		</dependency>
		
		<dependency>
			<groupId>net.sourceforge.jtds</groupId>
			<artifactId>jtds</artifactId>
			<version>1.3.1</version>
		</dependency>
		
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.2.3</version>
		</dependency>
		
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.3.0</version>
		</dependency>
				
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.6.6</version>
		</dependency>
			
		<dependency>
			<groupId>${spring.groupId}</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<dependency>
			<groupId>${spring.groupId}</groupId>
			<artifactId>spring-aspects</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<dependency>
			<groupId>${spring.groupId}</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<dependency>
			<groupId>${spring.groupId}</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<dependency>
			<groupId>${spring.groupId}</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<dependency>
			<groupId>${spring.groupId}</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<dependency>
			<groupId>${spring.groupId}</groupId>
			<artifactId>spring-expression</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<dependency>
			<groupId>${spring.groupId}</groupId>
			<artifactId>spring-instrument</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<dependency>
			<groupId>${spring.groupId}</groupId>
			<artifactId>spring-instrument-tomcat</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<dependency>
			<groupId>${spring.groupId}</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<dependency>
			<groupId>${spring.groupId}</groupId>
			<artifactId>spring-jms</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<dependency>
			<groupId>${spring.groupId}</groupId>
			<artifactId>spring-messaging</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<dependency>
			<groupId>${spring.groupId}</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${spring.version}</version>
		</dependency>	
		
		<dependency>
			<groupId>${spring.groupId}</groupId>
			<artifactId>spring-oxm</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<dependency>
			<groupId>${spring.groupId}</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<dependency>
			<groupId>${spring.groupId}</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<dependency>
			<groupId>${spring.groupId}</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<dependency>
			<groupId>${spring.groupId}</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>	
		
		<dependency>
			<groupId>${spring.groupId}</groupId>
			<artifactId>spring-webmvc-portlet</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<dependency>
			<groupId>${spring.groupId}</groupId>
			<artifactId>spring-websocket</artifactId>
			<version>${spring.version}</version>
		</dependency>
				
		<!-- alibaba的JSON处理库 -->
		<dependency>
		    <groupId>com.alibaba</groupId>
		    <artifactId>fastjson</artifactId>
		    <version>1.2.39</version>
		</dependency>
		
		<!-- 二维码 -->
		<dependency>
		    <groupId>com.google.zxing</groupId>
		    <artifactId>core</artifactId>
		    <version>3.3.2</version>
		</dependency>
		
		<!-- 二维码 -->
		<dependency>
		    <groupId>com.google.zxing</groupId>
		    <artifactId>javase</artifactId>
		    <version>3.3.2</version>
		</dependency>
					
		<!-- 本地仓库工具库 -->
        <dependency>
            <groupId>com.yklis</groupId>
            <artifactId>LisFunction</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
					
		<!-- 本地仓库工具库 -->
        <dependency>
            <groupId>com.yklis</groupId>
            <artifactId>LYFunction</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
					
	</dependencies>

	<build> 
	    <!-- 如果不定义finalName，则生成的包名是artifactId-version.war -->
	    <!-- 定义finalName，则生成的包名是finalName.war -->
	    <finalName>YkLis</finalName>
	    
        <!-- 如果不加该resources，则打包时只会默认将src/main/resources的文件做为资源文件打包，漏掉dao目录下的xml资源文件 -->
        <resources>  
           <resource>  
              <directory>src/main/resources</directory>  
           </resource>
           <resource>  
              <directory>src/main/java</directory>  
              <includes>  
                  <!-- **/*,表示src/main/java下各级子目录的xml文件 -->
                  <include>**/*.xml</include>  
              </includes>  
           </resource>
           <!-- maven变量build.time传入web.xml -->
           <resource>
	           <directory>src/main/webapp</directory>
	           <filtering>true</filtering>
	           <includes>
	                <include>WEB-INF/web.xml</include>
	           </includes>
	           <!-- maven内置变量${project.build.directory}:构建目录;${project.build.finalName}:产出物名称 -->
	           <targetPath>${project.build.directory}/${project.build.finalName}</targetPath>
           </resource>
        </resources>
        
	    <plugins>
	        <!-- 解决maven编译时“source-1.5 中不支持 diamond 运算符”的问题 -->
	        <plugin>
	            <groupId>org.apache.maven.plugins</groupId>  
                <artifactId>maven-compiler-plugin</artifactId>  
                <version>3.5.1</version>  
                <configuration>  
	               <source>1.7</source>  
	               <target>1.7</target>
                   <!-- 解决maven编译时“编码GBK的不可映射字符”的问题 -->
                   <encoding>utf8</encoding>
                </configuration>
	        </plugin>
	        <!-- maven变量build.time传入web.xml -->
            <plugin>
	            <groupId>org.apache.maven.plugins</groupId>
	            <artifactId>maven-war-plugin</artifactId>
	            <version>3.1.0</version>
	            <configuration>
		            <webXml>src/main/webapp/WEB-INF/web.xml</webXml>
	            </configuration>
            </plugin>
	    </plugins>
	</build>
	
	<!-- profile的激活方式很多，1、使用-P参数显示激活；2、使用activeByDefault设置激活;3... -->	
    <!-- <profiles>
        <profile> -->
            <!-- mvn package -->
            <!-- <id>local</id>
            <properties>
                <package.environment>local</package.environment>
            </properties>
            <activation> -->
                <!-- 没指定其他profile为激活状态时，该profile为默认激活 -->
                <!-- <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile> -->
            <!-- mvn install -P prod -->
            <!-- <id>prod</id>
            <properties>
                <package.environment>product</package.environment>
            </properties>
        </profile>
    </profiles> -->	
  
</project>
